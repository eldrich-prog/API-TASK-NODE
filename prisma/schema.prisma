// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  name          String
  role          String          @default("USER")
  posts         Post[]
  groups        Group[]
  Matriculation Matriculation[]
  Evaluation    Evaluation[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Post {
  id        Int      @id @default(autoincrement())
  published Boolean  @default(false)
  title     String
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task_Type {
  id        Int      @id @default(autoincrement())
  name      String
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model State {
  id         Int          @id @default(autoincrement())
  name       String
  Evaluation Evaluation[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Group {
  id            Int             @id @default(autoincrement())
  name          String
  admin         User           @relation(fields: [admin_id], references: [id])
  admin_id      Int
  tasks         Task[]
  Matriculation Matriculation[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Task {
  id           Int          @id @default(autoincrement())
  name_task    String
  description  String
  percentage   Float
  requirements String?
  task_type    Task_Type?   @relation(fields: [task_type_id], references: [id])
  group        Group?       @relation(fields: [group_id], references: [id])
  group_id     Int?
  task_type_id Int?
  Evaluation   Evaluation[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Matriculation {
  id          Int      @id @default(autoincrement())
  active      Boolean  @default(true)
  user        User    @relation(fields: [mat_user_id], references: [id])
  group       Group  @relation(fields: [group_id], references: [id])
  mat_user_id Int
  group_id    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Evaluation {
  id          Int      @id @default(autoincrement())
  task        Task    @relation(fields: [task_id], references: [id])
  user        User    @relation(fields: [user_id], references: [id])
  state       State   @relation(fields: [state_id], references: [id])
  note        Float
  task_id     Int
  user_id     Int
  state_id    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
